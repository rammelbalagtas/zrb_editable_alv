managed implementation in class zbp_i_ml_main_locksingleton_o2 unique;
strict ( 2 );

define behavior for Z_I_ML_MAIN_LockSingleton_S_O2 alias Singleton
with unmanaged save
lock master
etag master LastChangedAtMax
authorization master ( global )
{
  field ( readonly ) SingletonID, LastChangedAtMax;
  update;
  association _Main { create; }

}

define behavior for Z_I_PCI_ML_MAIN_S_O2 alias Main
persistent table zpciml_main_o2
lock dependent by _MainLockSingleton
authorization dependent by _MainLockSingleton
etag master LocalLastChangedAt
{
  update;
  delete;
  field ( mandatory : create, readonly : update ) ProcessKey;
  field ( readonly ) SingletonID, LocalCreatedBy, LocalCreatedAt, LocalLastChangedBy, LocalLastChangedAt, LastChangedAt;
  association _MainLockSingleton { }
  association _List { create; }
  mapping for zpciml_main_o2
    {
      ProcessKey         = process_key;
      ScriptId           = script_id;
      ProcessDesc        = process_desc;
      LocalCreatedBy     = local_created_by;
      LocalCreatedAt     = local_created_at;
      LocalLastChangedBy = local_last_changed_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
    }
}

define behavior for Z_i_pci_ml_list_s_o2 alias List
persistent table zpciml_list_o2
lock dependent by _MainLockSingleton
authorization dependent by _MainLockSingleton
etag master LocalLastChangedAt
{
  update;
  delete;
  field ( mandatory : create, readonly : update ) ProcessSeq;
  field ( readonly ) SingletonID, ProcessKey, LocalCreatedBy, LocalCreatedAt, LocalLastChangedBy, LocalLastChangedAt, LastChangedAt;
  association _MainLockSingleton {  }
  association _Main {  }
  mapping for zpci_ml_list
    {
      ProcessKey         = process_key;
      ProcessSeq         = process_seq;
      LocalCreatedBy     = local_created_by;
      LocalCreatedAt     = local_created_at;
      LocalLastChangedBy = local_last_changed_by;
      LocalLastChangedAt = local_last_changed_at;
      LastChangedAt      = last_changed_at;
      SendToSap          = send_to_sap;
      SapAddress         = sap_address;
      SendToSmtp         = send_to_smtp;
      SmtpAddress        = smtp_address;
      Express            = express;
      Copy               = copy;
      Blindcopy          = blindcopy;
    }
}